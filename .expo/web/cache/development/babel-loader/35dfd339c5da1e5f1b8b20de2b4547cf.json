{"ast":null,"code":"import interpolateNode, { Extrapolate } from \"../reanimated1/derived/interpolate\";\n\nvar getVal = function () {\n  var _f = function _f(config) {\n    var type = config.type,\n        coef = config.coef,\n        val = config.val,\n        ll = config.ll,\n        rr = config.rr,\n        x = config.x;\n\n    switch (type) {\n      case Extrapolate.IDENTITY:\n        return x;\n\n      case Extrapolate.CLAMP:\n        if (coef * val < coef * ll) {\n          return ll;\n        }\n\n        return rr;\n\n      case Extrapolate.EXTEND:\n      default:\n        return val;\n    }\n  };\n\n  _f._closure = {\n    Extrapolate: {\n      IDENTITY: Extrapolate.IDENTITY,\n      CLAMP: Extrapolate.CLAMP,\n      EXTEND: Extrapolate.EXTEND\n    }\n  };\n  _f.asString = \"function getVal(config){const{Extrapolate}=jsThis._closure;{var type=config.type,coef=config.coef,val=config.val,ll=config.ll,rr=config.rr,x=config.x;switch(type){case Extrapolate.IDENTITY:return x;case Extrapolate.CLAMP:if(coef*val<coef*ll){return ll;}return rr;case Extrapolate.EXTEND:default:return val;}}}\";\n  _f.__workletHash = 14030100394456;\n  _f.__location = \"C:\\\\Users\\\\nrpu\\\\Desktop\\\\Mobile App development\\\\HistoryArchiveApp\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolation.js (4:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar isExtrapolate = function () {\n  var _f = function _f(value) {\n    return value === Extrapolate.EXTEND || value === Extrapolate.CLAMP || value === Extrapolate.IDENTITY;\n  };\n\n  _f._closure = {\n    Extrapolate: {\n      EXTEND: Extrapolate.EXTEND,\n      CLAMP: Extrapolate.CLAMP,\n      IDENTITY: Extrapolate.IDENTITY\n    }\n  };\n  _f.asString = \"function isExtrapolate(value){const{Extrapolate}=jsThis._closure;{return value===Extrapolate.EXTEND||value===Extrapolate.CLAMP||value===Extrapolate.IDENTITY;}}\";\n  _f.__workletHash = 14994419438556;\n  _f.__location = \"C:\\\\Users\\\\nrpu\\\\Desktop\\\\Mobile App development\\\\HistoryArchiveApp\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolation.js (20:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar validateType = function () {\n  var _f = function _f(type) {\n    var EXTRAPOLATE_ERROR_MSG = \"Reanimated: config object is not valid, please provide valid config, for example:\\n    interpolate(value, [inputRange], [outputRange], {\\n    extrapolateLeft: 'clamp',\\n    extrapolateRight: 'extend',\\n  })\";\n\n    var EXTRAPOLATE_ERROR = function EXTRAPOLATE_ERROR(extrapolate) {\n      return \"Reanimated: not supported value for \\\"\" + extrapolate + \"\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n    interpolate(value, [inputRange], [outputRange], {\\n      \" + extrapolate + \": 'clamp',\\n  })\";\n    };\n\n    type = type !== null && type !== void 0 ? type : 'extend';\n    var hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n    var hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n    if (typeof type === 'object' && (Object.keys(type).length === 2 && !(hasExtrapolateLeft && hasExtrapolateRight) || Object.keys(type).length === 1 && !(hasExtrapolateLeft || hasExtrapolateRight) || Object.keys(type).length > 2)) {\n      throw new Error(EXTRAPOLATE_ERROR_MSG);\n    }\n\n    if (typeof type === 'object') {\n      if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n        throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n      }\n\n      if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n        throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n      }\n    }\n\n    if (typeof type === 'string' && !isExtrapolate(type)) {\n      throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n       interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n    }\n  };\n\n  _f._closure = {\n    isExtrapolate: isExtrapolate\n  };\n  _f.asString = \"function validateType(type){const{isExtrapolate}=jsThis._closure;{var EXTRAPOLATE_ERROR_MSG=\\\"Reanimated: config object is not valid, please provide valid config, for example:\\\\n    interpolate(value, [inputRange], [outputRange], {\\\\n    extrapolateLeft: 'clamp',\\\\n    extrapolateRight: 'extend',\\\\n  })\\\";var EXTRAPOLATE_ERROR=function EXTRAPOLATE_ERROR(extrapolate){return\\\"Reanimated: not supported value for \\\\\\\"\\\"+extrapolate+\\\"\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\"]\\\\n Valid example:\\\\n    interpolate(value, [inputRange], [outputRange], {\\\\n      \\\"+extrapolate+\\\": 'clamp',\\\\n  })\\\";};type=type!==null&&type!==void 0?type:'extend';var hasExtrapolateLeft=type.hasOwnProperty('extrapolateLeft');var hasExtrapolateRight=type.hasOwnProperty('extrapolateRight');if(typeof type==='object'&&(Object.keys(type).length===2&&!(hasExtrapolateLeft&&hasExtrapolateRight)||Object.keys(type).length===1&&!(hasExtrapolateLeft||hasExtrapolateRight)||Object.keys(type).length>2)){throw new Error(EXTRAPOLATE_ERROR_MSG);}if(typeof type==='object'){if(hasExtrapolateLeft&&!isExtrapolate(type.extrapolateLeft)){throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));}if(hasExtrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));}}if(typeof type==='string'&&!isExtrapolate(type)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\"]\\\\n Valid example:\\\\n       interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}}}\";\n  _f.__workletHash = 7131630748660;\n  _f.__location = \"C:\\\\Users\\\\nrpu\\\\Desktop\\\\Mobile App development\\\\HistoryArchiveApp\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolation.js (26:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar internalInterpolate = function () {\n  var _f = function _f(x, l, r, ll, rr, type) {\n    if (r - l === 0) return ll;\n    var progress = (x - l) / (r - l);\n    var val = ll + progress * (rr - ll);\n    var coef = rr >= ll ? 1 : -1;\n    var config = {\n      type: type,\n      coef: coef,\n      val: val,\n      ll: ll,\n      rr: rr,\n      x: x\n    };\n    validateType(type);\n\n    if (typeof type === 'object') {\n      if (coef * val < coef * ll) {\n        return getVal(Object.assign(config, {\n          type: type.extrapolateLeft\n        }));\n      } else if (coef * val > coef * ll) {\n        return getVal(Object.assign(config, {\n          type: type.extrapolateRight\n        }));\n      }\n    }\n\n    if (coef * val < coef * ll || coef * val > coef * rr) {\n      return getVal(config);\n    }\n\n    return val;\n  };\n\n  _f._closure = {\n    validateType: validateType,\n    getVal: getVal\n  };\n  _f.asString = \"function internalInterpolate(x,l,r,ll,rr,type){const{validateType,getVal}=jsThis._closure;{if(r-l===0)return ll;var progress=(x-l)/(r-l);var val=ll+progress*(rr-ll);var coef=rr>=ll?1:-1;var config={type:type,coef:coef,val:val,ll:ll,rr:rr,x:x};validateType(type);if(typeof type==='object'){if(coef*val<coef*ll){return getVal(Object.assign(config,{type:type.extrapolateLeft}));}else if(coef*val>coef*ll){return getVal(Object.assign(config,{type:type.extrapolateRight}));}}if(coef*val<coef*ll||coef*val>coef*rr){return getVal(config);}return val;}}\";\n  _f.__workletHash = 13030957841249;\n  _f.__location = \"C:\\\\Users\\\\nrpu\\\\Desktop\\\\Mobile App development\\\\HistoryArchiveApp\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolation.js (65:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolate = function () {\n  var _f = function _f(x, input, output, type) {\n    if (x && x.__nodeID) {\n      console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n      return interpolateNode.apply(undefined, arguments);\n    }\n\n    var length = input.length;\n    var narrowedInput = [];\n\n    if (x < input[0]) {\n      narrowedInput = [input[0], input[1], output[0], output[1]];\n    } else if (x > input[length - 1]) {\n      narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n    } else {\n      for (var i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n          break;\n        }\n      }\n    }\n\n    return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n  };\n\n  _f._closure = {\n    interpolateNode: interpolateNode,\n    internalInterpolate: internalInterpolate\n  };\n  _f.asString = \"function interpolate(x,input,output,type){const{interpolateNode,internalInterpolate}=jsThis._closure;{if(x&&x.__nodeID){console.warn(\\\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\\\");return interpolateNode.apply(undefined,arguments);}var length=input.length;var narrowedInput=[];if(x<input[0]){narrowedInput=[input[0],input[1],output[0],output[1]];}else if(x>input[length-1]){narrowedInput=[input[length-2],input[length-1],output[length-2],output[length-1]];}else{for(var i=1;i<length;++i){if(x<=input[i]){narrowedInput=[input[i-1],input[i],output[i-1],output[i]];break;}}}return internalInterpolate.apply({},[x].concat(narrowedInput).concat(type));}}\";\n  _f.__workletHash = 11505740393836;\n  _f.__location = \"C:\\\\Users\\\\nrpu\\\\Desktop\\\\Mobile App development\\\\HistoryArchiveApp\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolation.js (87:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["C:/Users/nrpu/Desktop/Mobile App development/HistoryArchiveApp/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"],"names":["interpolateNode","Extrapolate","getVal","config","type","coef","val","ll","rr","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","EXTRAPOLATE_ERROR_MSG","EXTRAPOLATE_ERROR","extrapolate","hasExtrapolateLeft","hasOwnProperty","hasExtrapolateRight","Object","keys","length","Error","extrapolateLeft","extrapolateRight","internalInterpolate","l","r","progress","assign","interpolate","input","output","__nodeID","console","warn","apply","undefined","arguments","narrowedInput","i","concat"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport interpolateNode, { Extrapolate, } from '../reanimated1/derived/interpolate';\nfunction getVal(config) {\n    'worklet';\n    const { type, coef, val, ll, rr, x } = config;\n    switch (type) {\n        case Extrapolate.IDENTITY:\n            return x;\n        case Extrapolate.CLAMP:\n            if (coef * val < coef * ll) {\n                return ll;\n            }\n            return rr;\n        case Extrapolate.EXTEND:\n        default:\n            return val;\n    }\n}\nfunction isExtrapolate(value) {\n    'worklet';\n    return (value === Extrapolate.EXTEND ||\n        value === Extrapolate.CLAMP ||\n        value === Extrapolate.IDENTITY);\n}\nfunction validateType(type) {\n    'worklet';\n    const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n    const EXTRAPOLATE_ERROR = (extrapolate) => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n    type = type !== null && type !== void 0 ? type : 'extend';\n    // eslint-disable-next-line no-prototype-builtins\n    const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n    // eslint-disable-next-line no-prototype-builtins\n    const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n    if (typeof type === 'object' &&\n        ((Object.keys(type).length === 2 &&\n            !(hasExtrapolateLeft && hasExtrapolateRight)) ||\n            (Object.keys(type).length === 1 &&\n                !(hasExtrapolateLeft || hasExtrapolateRight)) ||\n            Object.keys(type).length > 2)) {\n        throw new Error(EXTRAPOLATE_ERROR_MSG);\n    }\n    if (typeof type === 'object') {\n        if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n            throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n        }\n        if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n            throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n        }\n    }\n    if (typeof type === 'string' && !isExtrapolate(type)) {\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n    }\n}\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n    'worklet';\n    if (r - l === 0)\n        return ll;\n    const progress = (x - l) / (r - l);\n    const val = ll + progress * (rr - ll);\n    const coef = rr >= ll ? 1 : -1;\n    const config = { type, coef, val, ll, rr, x };\n    validateType(type);\n    if (typeof type === 'object') {\n        if (coef * val < coef * ll) {\n            return getVal(Object.assign(config, { type: type.extrapolateLeft }));\n        }\n        else if (coef * val > coef * ll) {\n            return getVal(Object.assign(config, { type: type.extrapolateRight }));\n        }\n    }\n    if (coef * val < coef * ll || coef * val > coef * rr) {\n        return getVal(config);\n    }\n    return val;\n}\nexport function interpolate(x, input, output, type) {\n    'worklet';\n    if (x && x.__nodeID) {\n        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n        // we can't use rest parameters in worklets at the moment\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return interpolateNode.apply(undefined, arguments);\n    }\n    const length = input.length;\n    let narrowedInput = [];\n    if (x < input[0]) {\n        narrowedInput = [input[0], input[1], output[0], output[1]];\n    }\n    else if (x > input[length - 1]) {\n        narrowedInput = [\n            input[length - 2],\n            input[length - 1],\n            output[length - 2],\n            output[length - 1],\n        ];\n    }\n    else {\n        for (let i = 1; i < length; ++i) {\n            if (x <= input[i]) {\n                narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n                break;\n            }\n        }\n    }\n    return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}\n"]},"metadata":{},"sourceType":"module"}